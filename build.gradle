plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    // RestDocs(1) AsciiDoctor RestDocs 플러그인
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    // Jacoco(1)   Jacoco Test Coverage 플러그인
    id 'jacoco'
}

group = 'com.carrot_auction_PJ'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor // Lombok(1) Lomobok Annotionation Processer Compile 추가
    }
    asciidoctorExt  // RestDocs(2) AsciiDoctor 확장 구성
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // 1. Spring Dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // 2. DB Driver Dependency
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // 3. Lombok Dependency
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // 4. RestDocs Dependency
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.6.RELEASE'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // 5. Query Dsl Dependency
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    // 6. Jakarta EE Annotation API Dependency
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // 7. Jakarta EE JPA (Java Persistence API) Dependency
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

// RestDocs(4) AsciiDoctor Snippet Output Directory
ext {
    snippetsDir = file('build/generated-snippets')
}
// RestDocs(5) Test Snippet Output Directory
test {
    outputs.dir snippetsDir
}
// RestDocs(6) AsciiDoctor 작업 설정 및 의존성 추가
asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}
// RestDocs(7) bootJar 작업 설정, AsciiDoctor 생성 문서 포함
bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

// Jacoco(2)
jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

// Jacoco(3) Jacoco 테스트 커버리지 설정
test {
    // Jacoco(3-1) Jacoco 테스트 후 리포트 생성
    finalizedBy jacocoTestReport
}

// Jacoco(4) Jacoco 테스트 Report 관련 설정
jacocoTestReport {
    // Jacoco(4-1) 리포트 생성 전 테스트 실행
    dependsOn test
    // Jacoco(4-2) xml , csv 리포트 생성하지 않음
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// Jacoco(5) Jacoco 테스트 커버리지 검증 규칙 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                maximum = 0.90
            }
            excludes = []
        }
    }
}

// Jacoco(6) 테스트 작업에 대한 Jacoco 설정
test {
    jacoco {
        destinationFile = layout.buildDirectory.file('Jacoco/JacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('Jacoco/classpathdumps').get().asFile
    }
}


// QueryDsl(1) QueryDsl 빌드 옵션
def querydslDir = "$buildDir/generated/querydsl"

// QueryDsl(2) QueryDSL 생성된 클래스의 소스 디렉토리 정의
sourceSets {
    main.java.srcDirs += [querydslDir]
}

// QueryDsl(3) JavaCompile 작업을 설정하여 생성된 소스가 QueryDSL 디렉토리로 출력되도록 함
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

// QueryDsl(4) gradlew clean 명령어 실행시 querydsl buildFile 삭제
clean {
    delete file(querydslDir)
}